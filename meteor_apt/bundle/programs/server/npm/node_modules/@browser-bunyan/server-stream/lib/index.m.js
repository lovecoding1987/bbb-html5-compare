var userAgent = typeof window !== 'undefined' ? window.navigator.userAgent : 'no-window';
var isBot = /bot|crawler|spider|crawling/i.test(userAgent);
var ServerStream = function ServerStream(opts) {
    var this$1 = this;
    if ( opts === void 0 ) opts = {};

    var method = opts.method; if ( method === void 0 ) method = 'PUT';
    var url = opts.url; if ( url === void 0 ) url = '/log';
    var throttleInterval = opts.throttleInterval; if ( throttleInterval === void 0 ) throttleInterval = 3000;
    var withCredentials = opts.withCredentials; if ( withCredentials === void 0 ) withCredentials = false;
    var onError = opts.onError;
    var flushOnClose = opts.flushOnClose; if ( flushOnClose === void 0 ) flushOnClose = false;
    var writeCondition = opts.writeCondition; if ( writeCondition === void 0 ) writeCondition = ServerStream.defaultWriteCondition;
    this.writeCondition = writeCondition;
    this.records = {};
    this.start({
        method: method,
        url: url,
        throttleInterval: throttleInterval,
        withCredentials: withCredentials,
        onError: onError
    });
    var sendBeaconSupported = typeof Blob !== undefined && window.navigator.sendBeacon;
    if (flushOnClose && sendBeaconSupported && method.toUpperCase() === 'POST') {
        window.addEventListener('unload', function () {
            if (this$1.currentThrottleTimeout) {
                window.clearTimeout(this$1.currentThrottleTimeout);
            }
            var recs = this$1.recordsAsArray();
            if (recs.length) {
                var blob = new Blob([JSON.stringify(recs)], {
                    type: 'text/plain'
                });
                navigator.sendBeacon(url, blob);
            }
        }, false);
    }
};
ServerStream.prototype.start = function start (ref) {
        var this$1 = this;
        var method = ref.method;
        var url = ref.url;
        var throttleInterval = ref.throttleInterval;
        var withCredentials = ref.withCredentials;
        var onError = ref.onError;

    var throttleRequests = function () {
        this$1.currentThrottleTimeout = setTimeout(function () {
            var recs = this$1.recordsAsArray();
            if (recs.length) {
                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = (function () {
                    if (xhr.readyState === XMLHttpRequest.DONE) {
                        if (xhr.status >= 400) {
                            if (typeof onError === 'function') {
                                onError.call(this$1, recs, xhr);
                            } else {
                                console.warn('Browser Bunyan: A server log write failed');
                            }
                        }
                        this$1.records = {};
                        throttleRequests();
                    }
                });
                xhr.open(method, url);
                xhr.setRequestHeader('Content-Type', 'application/json');
                xhr.withCredentials = withCredentials;
                xhr.send(JSON.stringify(recs));
            } else {
                throttleRequests();
            }
        }, throttleInterval);
    };
    throttleRequests();
};
ServerStream.prototype.stop = function stop () {
        var this$1 = this;

    setTimeout(function () {
        if (this$1.currentThrottleTimeout) {
            clearTimeout(this$1.currentThrottleTimeout);
            this$1.currentThrottleTimeout = null;
        }
    }, 1);
};
ServerStream.prototype.write = function write (rec) {
    rec.url = typeof window !== 'undefined' && window.location.href;
    rec.userAgent = userAgent;
    if (this.currentThrottleTimeout && this.writeCondition(rec)) {
        if (this.records[rec.msg]) {
            this.records[rec.msg].count++;
        } else {
            rec.count = 1;
            this.records[rec.msg] = rec;
        }
    }
};
ServerStream.prototype.recordsAsArray = function recordsAsArray () {
        var this$1 = this;

    return Object.keys(this.records).map(function (errKey) { return this$1.records[errKey]; });
};
ServerStream.defaultWriteCondition = function defaultWriteCondition () {
    return window.navigator.onLine && !isBot;
};

export { ServerStream };
//# sourceMappingURL=index.m.js.map
