var TRACE = 10;
var DEBUG = 20;
var INFO = 30;
var WARN = 40;
var ERROR = 50;
var FATAL = 60;
var levelFromName = {
    'trace': TRACE,
    'debug': DEBUG,
    'info': INFO,
    'warn': WARN,
    'error': ERROR,
    'fatal': FATAL
};
var nameFromLevel = {};
Object.keys(levelFromName).forEach(function (name) {
    nameFromLevel[levelFromName[name]] = name;
});

var DEFAULT_CSS = {
    levels: {
        trace: 'color: DeepPink',
        debug: 'color: GoldenRod',
        info: 'color: DarkTurquoise',
        warn: 'color: Purple',
        error: 'color: Crimson',
        fatal: 'color: Black'
    },
    def: 'color: DimGray',
    msg: 'color: SteelBlue',
    src: 'color: DimGray; font-style: italic; font-size: 0.9em'
};
var ConsoleFormattedStream = function ConsoleFormattedStream(ref) {
    if ( ref === void 0 ) ref = {};
    var logByLevel = ref.logByLevel; if ( logByLevel === void 0 ) logByLevel = false;
    var css = ref.css; if ( css === void 0 ) css = DEFAULT_CSS;

    this.logByLevel = logByLevel;
    this.css = css;
};
ConsoleFormattedStream.prototype.write = function write (rec) {
    var levelCss, consoleMethod;
    var defaultCss = this.css.def;
    var msgCss = this.css.msg;
    var srcCss = this.css.src;
    var loggerName = rec.childName ? rec.name + '/' + rec.childName : rec.name;
    var levelName = nameFromLevel[rec.level];
    var formattedLevelName = (Array(6 - levelName.length).join(' ') + levelName).toUpperCase();
    if (this.logByLevel) {
        if (rec.level === TRACE) {
            levelName = 'debug';
        } else if (rec.level === FATAL) {
            levelName = 'error';
        }
        consoleMethod = typeof console[levelName] === 'function' ? console[levelName] : console.log;
    } else {
        consoleMethod = console.log;
    }
    if (rec.level < DEBUG) {
        levelCss = this.css.levels.trace;
    } else if (rec.level < INFO) {
        levelCss = this.css.levels.debug;
    } else if (rec.level < WARN) {
        levelCss = this.css.levels.info;
    } else if (rec.level < ERROR) {
        levelCss = this.css.levels.warn;
    } else if (rec.level < FATAL) {
        levelCss = this.css.levels.error;
    } else {
        levelCss = this.css.levels.fatal;
    }
    var padZeros = function (number, len) { return Array(len + 1 - (number + '').length).join('0') + number; };
    var logArgs = [];
    logArgs.push(("[%s:%s:%s:%s] %c%s%c: %s: %c%s " + (rec.src ? '%c%s' : '')));
    logArgs.push(padZeros(rec.time.getHours(), 2));
    logArgs.push(padZeros(rec.time.getMinutes(), 2));
    logArgs.push(padZeros(rec.time.getSeconds(), 2));
    logArgs.push(padZeros(rec.time.getMilliseconds(), 4));
    logArgs.push(levelCss);
    logArgs.push(formattedLevelName);
    logArgs.push(defaultCss);
    logArgs.push(loggerName);
    logArgs.push(msgCss);
    logArgs.push(rec.msg);
    if (rec.src) {
        logArgs.push(srcCss);
        logArgs.push(rec.src);
    }
    consoleMethod.apply(console, logArgs);
    if (rec.err && rec.err.stack) {
        consoleMethod.call(console, '%c%s,', levelCss, rec.err.stack);
    }
    if (rec.obj) {
        consoleMethod.call(console, rec.obj);
    }
};
ConsoleFormattedStream.getDefaultCss = function getDefaultCss () {
    return DEFAULT_CSS;
};

export { ConsoleFormattedStream };
//# sourceMappingURL=index.m.js.map
