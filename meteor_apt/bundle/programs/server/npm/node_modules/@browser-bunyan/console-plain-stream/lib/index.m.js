var TRACE = 10;
var DEBUG = 20;
var INFO = 30;
var WARN = 40;
var ERROR = 50;
var FATAL = 60;
var levelFromName = {
    'trace': TRACE,
    'debug': DEBUG,
    'info': INFO,
    'warn': WARN,
    'error': ERROR,
    'fatal': FATAL
};
var nameFromLevel = {};
Object.keys(levelFromName).forEach(function (name) {
    nameFromLevel[levelFromName[name]] = name;
});

var ConsolePlainStream = function ConsolePlainStream(ref) {
    if ( ref === void 0 ) ref = {};
    var logByLevel = ref.logByLevel; if ( logByLevel === void 0 ) logByLevel = false;

    this.logByLevel = logByLevel;
};
ConsolePlainStream.prototype.write = function write (rec) {
    var consoleMethod;
    var loggerName = rec.childName ? rec.name + '/' + rec.childName : rec.name;
    var levelName = nameFromLevel[rec.level];
    var formattedLevelName = (Array(6 - levelName.length).join(' ') + levelName).toUpperCase();
    if (this.logByLevel) {
        if (rec.level === TRACE) {
            levelName = 'debug';
        } else if (rec.level === FATAL) {
            levelName = 'error';
        }
        consoleMethod = typeof console[levelName] === 'function' ? console[levelName] : console.log;
    } else {
        consoleMethod = console.log;
    }
    var padZeros = function (number, len) { return Array(len + 1 - (number + '').length).join('0') + number; };
    var msg = '[' + padZeros(rec.time.getHours(), 2) + ':';
    msg += padZeros(rec.time.getMinutes(), 2) + ':';
    msg += padZeros(rec.time.getSeconds(), 2) + ':';
    msg += padZeros(rec.time.getMilliseconds(), 4) + '] ';
    msg += formattedLevelName + ': ';
    msg += loggerName + ': ';
    msg += rec.msg;
    if (rec.src) {
        msg += ' (' + rec.src + ')';
    }
    consoleMethod.call(console, msg);
    if (rec.err && rec.err.stack) {
        consoleMethod.call(console, rec.err.stack);
    }
    if (rec.obj) {
        consoleMethod.call(console, rec.obj);
    }
};

export { ConsolePlainStream };
//# sourceMappingURL=index.m.js.map
